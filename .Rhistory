fit2t <- lm(y ~ x + z)
fit1t <- lm(y ~ z)
summary(fit2)
summary(fit2t)
fit2f <- aov(y ~ x + z)
fit1f <- aov(y ~ z)
summary(fit2f)
summary(fit1f)
tM <- matrix(c(1,2,1,1,2,5,4,2,3,4,2,3,2,2,3,1,2,3,1,3,2,4,1,3,1,2,4,4,5,2,5,1,1,5,1,6,1,6,4,1,1,4), nrows=6)
M <- t(tM)
M
tM <- matrix(c(1,2,1,1,2,5,4,2,3,4,2,3,2,2,3,1,2,3,1,3,2,4,1,3,1,2,4,4,5,2,5,1,1,5,1,6,1,6,4,1,1,4), nrow=6)
M <- t(tM)
M
tM <- matrix(c(1,2,1,1,2,5,4,2,3,4,2,3,2,2,3,1,2,3,1,3,2,4,1,3,1,2,4,4,5,2,5,1,1,5,1,6,1,6,4,1,1,4), nrow=7)
M <- t(tM)
M
for (start_row in c(1,3,5)) {
end_row <- start_row + 1
print(start_row)
}
candidate_pairs <- matrix(numeric(42), nrow=6)
candidate_pairs
candidate_pairs <- matrix(numeric(49), nrow=7)
candidate_pairs
for (col_left in 1:6) {
for (col_right in col_left:7)
print(paste(col_left, " ", col_right))
}
for (col_left in 1:6) {
for (col_right in col_left:7)
#        print(paste(col_left, " ", col_right))
for (start_row in c(1,3,5)) {
end_row <- start_row + 1
if ( M[start_row, col_left] == M[start_row, col_right] and
M[end_row, col_left] == M[end_row, col_right] )
candidate_pairs[col_left, col_right] <- 1
}
}
for (col_left in 1:6) {
for (col_right in col_left:7)
# print(paste(col_left, " ", col_right))
for (start_row in c(1,3,5)) {
end_row <- start_row + 1
if ( M[start_row, col_left] == M[start_row, col_right] and
M[end_row, col_left] == M[end_row, col_right] )
candidate_pairs[col_left, col_right] <- 1
}
}
}
candidate_pairs
M[1,3]
M[1,2]
M[4,2]
M[4,3]
M[5,3]
M[6,4]
candidate_pairs <- matrix(numeric(49), nrow=7)
candidate_pairs
for (col_left in 1:6) {
for (col_right in col_left:7)
# print(paste(col_left, " ", col_right))
for (start_row in c(1,3,5)) {
end_row <- start_row + 1
if ( M[start_row, col_left] == M[start_row, col_right] and
M[end_row, col_left] == M[end_row, col_right] )
{
candidate_pairs[col_left, col_right] <- 1
print(start_row)
print(end_row)
print(col_left)
print(col_right)
}
}
}
}
candidate_pairs <- matrix(numeric(49), nrow=7)
candidate_pairs
for (col_left in 1:6) {
for (col_right in col_left:7)
# print(paste(col_left, " ", col_right))
for (start_row in c(1,3,5)) {
end_row <- start_row + 1
if ( M[start_row, col_left] == M[start_row, col_right] and
M[end_row, col_left] == M[end_row, col_right] ) {
candidate_pairs[col_left, col_right] <- 1
print(start_row)
print(end_row)
print(col_left)
print(col_right)
}
}
}
}
for (col_left in 1:6) {
for (col_right in col_left:7)
# print(paste(col_left, " ", col_right))
for (start_row in c(1,3,5)) {
end_row <- start_row + 1
if ( M[start_row, col_left] == M[start_row, col_right] &&
M[end_row, col_left] == M[end_row, col_right] ) {
candidate_pairs[col_left, col_right] <- 1
print(start_row)
print(end_row)
print(col_left)
print(col_right)
}
}
}
}
for (col_left in 1:6) {
for (col_right in col_left:7) {
# print(paste(col_left, " ", col_right))
for (start_row in c(1,3,5)) {
end_row <- start_row + 1
if ( M[start_row, col_left] == M[start_row, col_right] &&
M[end_row, col_left] == M[end_row, col_right] ) {
candidate_pairs[col_left, col_right] <- 1
print(start_row)
print(end_row)
print(col_left)
print(col_right)
}
}
}
}
candidate_pairs
## Set diagonal to zero; obviously a column is similar to itself
for (i in 1:7) {
candidate_pairs[i,i] <- 0
}
candidate_pairs
for (i in 1:6) {
for (j in i:7)
if (candidate_pairs[i, j] == 1) {
print(paste("C",i," and ", j))
}
}
for (i in 1:6) {
for (j in i:7)
if (candidate_pairs[i, j] == 1) {
print(paste0("C",i," and C", j))
}
}
install.packages("sets")
length(s1)
s1 <- "ABRACADABRA"
s2 <- "BRICABRAC"
length(s1)
nchar(s1)
library(sets)
x <- "AB"
y <- "AB"
j <- set(x, y)
j
s1_set <- set()
s1_set
s1[1:2]
substr(s1,1,2)
substr(s1,10,2)
substring(s1,10,2)
substring(s1,10,11)
substr(s1,10,11)
s1 <- "ABRACADABRA"
s2 <- "BRICABRAC"
for (i in 1:(nchar(s1)-1) {
s1_set <- union(s1_set, substr(s1,i,i+1))
}
for (i in 1:(nchar(s2)-1) {
s2_set <- union(s2_set, substr(s2,i,i+1))
}
union(s1, s2)
library(sets)
s1 <- "ABRACADABRA"
s2 <- "BRICABRAC"
for (i in 1:(nchar(s1)-1)) {
s1_set <- union(s1_set, substr(s1,i,i+1))
}
for (i in 1:(nchar(s2)-1)) {
s2_set <- union(s2_set, substr(s2,i,i+1))
}
s1 <- "ABRACADABRA"
s2 <- "BRICABRAC"
s1_set <- set()
for (i in 1:(nchar(s1)-1)) {
s1_set <- union(s1_set, substr(s1,i,i+1))
}
s2_set <- set()
for (i in 1:(nchar(s2)-1)) {
s2_set <- union(s2_set, substr(s2,i,i+1))
}
union(s1_set, s2_set)
length(s1_set)
s1_set
s1_set <- set()
for (i in 1:(nchar(s1)-1)) {
s1_set <- union(s1_set, substr(s1,i,i+1))
}
s1_set
paste0("The number of 2-shingles in ", s1, " is" length(s1_set))
paste0("The number of 2-shingles in ", s1, " is", length(s1_set))
paste0("The number of 2-shingles they have in common is " length(intersect(s1_set, s2_set)))
length(intersect(s1_set, s2_set))
paste0("The number of 2-shingles in ", s1, " is ", length(s1_set))
paste0("The number of 2-shingles in ", s2, " is ", length(s2_set))
paste0("The number of 2-shingles they have in common is ", length(intersect(s1_set, s2_set)))
paste0("The size of their intersection is: ", length(intersect(s1_set, s2_set)))
paste0("The size of their union is: ", length(union(s1_set, s2_set)))
paste0("So their Jaccard similarity is: ", length(intersect(s1_set, s2_set)) / length(union(s1_set, s2_set)))
library(sets)
baskets[1] <- set()
basket.names <- c(1:100)
baskets <- sapply(mylist.names,function(x) NULL)
baskets[1] <- set()
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[1] <- set()
u <- set()
u
baskets[1] <- set(24)
baskets[1]
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[1]]
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[2]] <- set(60)
baskets[[1]]
baskets[[2]]
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[2]] <- set(60)
baskets[[1]] <- union(baskets[[1]], 32)
baskets[[1]]
baskets[[2]]
baskets.names <- c(1:100)
baskets <- lapply(baskets.names,function(x) NULL)
baskets
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
str(baskets)
baskets[[1]] <- set(24)
baskets[[1]]
q <- union(baskets[[1]], 32)
q
baskets[[1]] <- union(baskets[[1]], set(32)}
baskets[[1]]
baskets[[1]] <- union(baskets[[1]], set(32))
baskets[[1]]
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[2]] <- set(60)
baskets[[1]] <- union(baskets[[1]], set(32))
baskets[[1]]
q <- union(baskets[[1]], set(32))
q
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[2]] <- set(60)
baskets[[1]][1] <- union(baskets[[1]], set(32))
baskets[[1]]
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[2]] <- set(60)
baskets[1] <- union(baskets[[1]], set(32))
baskets[[1]]
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[1]]
union(set(24), set(32))
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[2]] <- set(60)
baskets[[1]] <- union(baskets[[1]], 32)
baskets[[1]]
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[2]] <- set(60)
baskets[[1]] <- union(baskets[[1]], "32")
baskets[[1]]
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[2]] <- set(60)
baskets[[1]] <- set(baskets[[1]], 32)
baskets[[1]]
baskets[[1]] <- set(24)
baskets[[2]] <- set(60)
baskets[[1]] <- set(baskets[[1]][:], 32)
baskets[[1]] <- set(baskets[[1]][1:], 32)
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[2]] <- set(60)
baskets[[1]] <- set_union(baskets[[1]], 32)
baskets[[1]]
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
baskets[[1]] <- set(24)
baskets[[2]] <- set(60)
baskets[[1]] <- set_union(baskets[[1]], 32)
baskets[[1]] <- set_union(baskets[[1]], 48)
baskets[[1]]
24 mod 12
24 %% 12
25 %% 12
for (i in 1:100) {
baskets[[i]] <- set(i)
for (j in 1:(i-1)) {
if (j %% i == 0) set_union(baskets[[i]], j)
}
}
baskets[[1]]
baskets[[2]]
baskets[[24]]
for (i in 1:100) {
baskets[[i]] <- set(i)
for (j in 1:(i-1)) {
if (j %% i == 0) baskets[[i]] <- set_union(baskets[[i]], j)
}
}
baskets[[1]]
baskets[[2]]
baskets[[24]]
for (i in 1:100) {
baskets[[i]] <- set(i)
for (j in 1:(i-1)) {
if (i %% j == 0) baskets[[i]] <- set_union(baskets[[i]], j)
}
}
baskets[[1]]
baskets[[2]]
baskets[[24]]
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
for (i in 1:10) {
baskets[[i]] <- set(i)
baskets[[i]]
for (j in 1:(i-1)) {
if (i %% j == 0) baskets[[i]] <- set_union(baskets[[i]], j)
}
}
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
for (i in 1:10) {
baskets[[i]] <- set(i)
print(baskets[[i]])
for (j in 1:(i-1)) {
if (i %% j == 0) baskets[[i]] <- set_union(baskets[[i]], j)
}
}
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
for (i in 1:10) {
#    baskets[[i]] <- set(i)
#    print(baskets[[i]])
for (j in 1:(i-1)) {
if (i %% j == 0) { baskets[[i]] <- set_union(baskets[[i]], j) }
}
}
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
for (i in 1:10) {
#    baskets[[i]] <- set(i)
#    print(baskets[[i]])
for (j in 1:(i-1)) {
print(j)
if (i %% j == 0) { baskets[[i]] <- set_union(baskets[[i]], j) }
}
}
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
for (i in 1:10) {
for (j in 1:i) {
print(j)
if (i %% j == 0) { baskets[[i]] <- set_union(baskets[[i]], j) }
}
}
baskets[[1]]
baskets[[2]]
baskets[[10]]
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
for (i in 1:100) {
for (j in 1:i) {
print(j)
if (i %% j == 0) { baskets[[i]] <- set_union(baskets[[i]], j) }
}
}
baskets.names <- c(1:100)
baskets <- sapply(baskets.names,function(x) NULL)
for (i in 1:100) {
for (j in 1:i) {
if (i %% j == 0) { baskets[[i]] <- set_union(baskets[[i]], j) }
}
}
baskets
is.element(1, baskets[[1]])
is.element(2, baskets[[1]])
conf_3_5_1 <- TRUE
conf_1_2_4 <- TRUE
conf_8_12_96 <- TRUE
conf_3_4_5_42 <- TRUE
for (i in 1:100) {
if (conf_3_5_1) {
if (is.element(3, baskets[[i]]) && is.element(5, baskets[[i]])) {
if (is.element(1, baskets[[i]]) == FALSE) conf_3_5_1 <- FALSE
}
}
if (conf_1_2_4) {
if (is.element(1, baskets[[i]]) && is.element(2, baskets[[i]])) {
if (is.element(4, baskets[[i]]) == FALSE) conf_1_2_4 <- FALSE
}
}
if (conf_8_12_96) {
if (is.element(8, baskets[[i]]) && is.element(12, baskets[[i]])) {
if (is.element(96, baskets[[i]]) == FALSE) conf_8_12_96 <- FALSE
}
}
if (conf_3_4_5_42) {
if (is.element(3, baskets[[i]]) && is.element(4, baskets[[i]]) &&
is.element(5, baskets[[i]])) {
if (is.element(42, baskets[[i]]) == FALSE) conf_3_4_5_42 <- FALSE
}
}
}
conf_3_5_1
conf_1_2_4
conf_8_12_96
conf_3_4_5_42
letter_string <- "ABCDEF"
for (letter1 in letter_string) {
for (letter2 in letter_string) {
if (letter 1 < letter2) print(paste0("{", letter1, ", ", letter2, "}"))
}
}
for (letter1 in letter_string) {
for (letter2 in letter_string) {
if (letter1 < letter2) print(paste0("{", letter1, ", ", letter2, "}"))
}
}
for (letter1 in letter_string) {
for (letter2 in letter_string) {
print(paste0(letter1, letter2)
if (letter1 < letter2) print(paste0("{", letter1, ", ", letter2, "}"))
}
}
for (letter1 in letter_string) {
for (letter2 in letter_string) {
print(paste0(letter1, letter2)
if (letter1 < letter2) {print(paste0("{", letter1, ", ", letter2, "}"))}
}
}
letter_string <- "ABCDEF"
for (letter1 in letter_string) {
}
for (letter1 in letter_string) {
print(letter1)
}
letter_string <- "ABCDEF"
splitted <- strsplit(letter_string,"")[[1]]
splitted
for (letter1 in splitted) {
print(letter1)
}
splitted <- strsplit(letter_string,"")[[1]]
for (letter1 in splitted) {
for (letter2 in splitted) {
print(paste0(letter1, letter2)
if (letter1 < letter2) {print(paste0("{", letter1, ", ", letter2, "}"))}
}
}
for (letter1 in splitted) {
for (letter2 in splitted) {
print(paste0(letter1, letter2))
if (letter1 < letter2) {print(paste0("{", letter1, ", ", letter2, "}"))}
}
}
for (letter1 in splitted) {
for (letter2 in splitted) {
if (letter1 < letter2) {print(paste0("{", letter1, ", ", letter2, "}"))}
}
}
setwd("/Users/JerryTsai/userjst/individ/knowledg/cur/jhu.sph/ds05_reproducible/projects/project01/RepData_PeerAssessment1")
library(plyr)
activityDF <- read.csv("activity.csv", header=TRUE)
# str(activityDF)
activityDF$Rdate <- as.Date(strptime(activityDF$date, "%Y-%m-%d"))
head(activityDF)
activityDF_noNA <- activityDF[(which(not(is.na(activityDF$steps)))), ]
activityDF_noNA <- activityDF[(which(!is.na(activityDF$steps))), ]
by_date <- ddply(activityDF_noNA, .(Rdate), summarize, steps=sum(steps, na.rm=TRUE))
library(ggplot2)
qplot(steps, data=by_date, geom="histogram", binwidth=2500, xlab="Total # of Steps per Day",
main="Steps each day")
ls
ls()
getwd()
library(knitr)
knit2html("PA1_template.Rmd")
browseURL("PA1_template.html")
knit2html("PA1_template.Rmd")
knit2html("PA1_template.Rmd")
